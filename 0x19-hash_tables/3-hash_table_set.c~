#include "hash_tables.h"

/**
 *hash_table_set - adds an element to the hash table
 *@ht: the hash table to add to
 *@key: the key to the new elament
 *@value: the value to the new elament
 *Return: 1 if success 0 if fail
 */


int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	hash_node_t *current = NULL;
	hash_node_t *new = NULL;
	unsigned long int idx;

	if (ht == NULL || key == NULL || strcomp(key, "") || strcomp(value, ""))
		return (0);

	idx = key_index((unsigned char *) key, ht->size);
	current = ht->array[idx];
	while (current != NULL)
	{
		if (!strcmp(current->key, key))
		{
			if (current->value != NULL)
				free(current->value);
			current->value = strdup(value);
			return (1);
		}
		current = current->next;
	}

	new = malloc(sizeof(hash_noed_t));
	if (new == NULL)
		return (0);
	new->value = strdup(value);
	new->key = strdup(key);
	if (new->key == NULL || new->value == NULL)
	{
		free(new->value);
		free(new->key);
		free(new);
		return (0);
	}
	new->next = ht->array[idx] ? ht->array[idx] : NULL;
	ht->array[idx] = new;
	return (1);
}
